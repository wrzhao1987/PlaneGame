diff --git a/PlaneGame.xcodeproj/project.xcworkspace/xcuserdata/Martin.xcuserdatad/UserInterfaceState.xcuserstate b/PlaneGame.xcodeproj/project.xcworkspace/xcuserdata/Martin.xcuserdatad/UserInterfaceState.xcuserstate
index ecff35a..a148211 100644
Binary files a/PlaneGame.xcodeproj/project.xcworkspace/xcuserdata/Martin.xcuserdatad/UserInterfaceState.xcuserstate and b/PlaneGame.xcodeproj/project.xcworkspace/xcuserdata/Martin.xcuserdatad/UserInterfaceState.xcuserstate differ
diff --git a/PlaneGame.xcodeproj/xcuserdata/Martin.xcuserdatad/xcdebugger/Breakpoints.xcbkptlist b/PlaneGame.xcodeproj/xcuserdata/Martin.xcuserdatad/xcdebugger/Breakpoints.xcbkptlist
index 05301bc..0809307 100644
--- a/PlaneGame.xcodeproj/xcuserdata/Martin.xcuserdatad/xcdebugger/Breakpoints.xcbkptlist
+++ b/PlaneGame.xcodeproj/xcuserdata/Martin.xcuserdatad/xcdebugger/Breakpoints.xcbkptlist
@@ -2,4 +2,19 @@
 <Bucket
    type = "1"
    version = "1.0">
+   <FileBreakpoints>
+      <FileBreakpoint
+         shouldBeEnabled = "No"
+         ignoreCount = "0"
+         continueAfterRunningActions = "No"
+         filePath = "cocos2d-2.x-ARC-iOS/InputLayer.m"
+         timestampString = "398237352.048365"
+         startingColumnNumber = "9223372036854775807"
+         endingColumnNumber = "9223372036854775807"
+         startingLineNumber = "76"
+         endingLineNumber = "76"
+         landmarkName = "-update:"
+         landmarkType = "5">
+      </FileBreakpoint>
+   </FileBreakpoints>
 </Bucket>
diff --git a/cocos2d-2.x-ARC-iOS/Bullet.h b/cocos2d-2.x-ARC-iOS/Bullet.h
index aa5b0a4..7f0be49 100755
--- a/cocos2d-2.x-ARC-iOS/Bullet.h
+++ b/cocos2d-2.x-ARC-iOS/Bullet.h
@@ -27,6 +27,6 @@
 @property (readwrite, nonatomic) CGPoint velocity;
 
 +(id) bullet;
--(void) shootBulletFromShip:(Ship*)ship;
+-(void) shootBulletFromShip:(CGPoint)startPosition velocity:(CGPoint)vel frameName:(NSString*)framename;
 
 @end
diff --git a/cocos2d-2.x-ARC-iOS/Bullet.m b/cocos2d-2.x-ARC-iOS/Bullet.m
index 046ef58..ef87fc2 100755
--- a/cocos2d-2.x-ARC-iOS/Bullet.m
+++ b/cocos2d-2.x-ARC-iOS/Bullet.m
@@ -15,10 +15,13 @@
 
 #import "Bullet.h"
 #import "Ship.h"
+#import "GameLayer.h"
 
 @interface Bullet (PrivateMethods)
+
 -(id) initWithShip:(Ship*)ship;
 -(id) initWithBulletImage;
+
 @end
 
 
@@ -26,6 +29,7 @@
 
 @synthesize velocity;
 
+
 +(id) bullet
 {
 	return [[self alloc] initWithBulletImage];
@@ -41,39 +45,36 @@
 }
 
 // Re-Uses the bullet
--(void) shootBulletFromShip:(Ship*)ship
+-(void) shootBulletFromShip:(CGPoint)startPosition velocity:(CGPoint)vel frameName:(NSString*)frameName
 {
-    // create a random angle and calculate and use
-    // it so that not all bullets float in one line
-    // the velocity is in pixels / second
-    float spread = (CCRANDOM_0_1() - 0.5f) * 0.5f;
-    velocity = CGPointMake(100, spread*100);
-	
-    // remember the right border of the screen
-    // we use this to remove the bullet from the scene
-    outsideScreen = [CCDirector sharedDirector].winSize.width;
-    
-    // set the start position of the bullet
-    // which is in the lower part of the ship
-    self.position = CGPointMake(ship.position.x + 45, ship.position.y - 19);
+    self.velocity = vel;
+    self.position = startPosition;
     self.visible = YES;
-	
-    // run "update" with every frame redraw
+    
+    // Change the bullet's texture by setting a different SpriteFrame to be displayed
+    CCSpriteFrame* frame = [[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:frameName];
+    [self setDisplayFrame:frame];
+    
+    [self unscheduleUpdate];
     [self scheduleUpdate];
 }
 
+
 -(void) update:(ccTime)delta
 {
     // update position of the bullet
     // multiply the velocity by the time since the last update was called
     // this ensures same bullet velocity even if frame rate drops
 	self.position = ccpAdd(self.position, ccpMult(velocity, delta));
-	
-    // delete the bullet if it leaves the screen
-	if (self.position.x > outsideScreen)
+    
+    // When the bullet leaves the screen, make it invisible
+    // Unschedule the bullet if it leaves the screen, IMPORTANT!!
+    
+	if (CGRectIntersectsRect(self.boundingBox, [GameLayer sharedGameLayer].screenRect) == NO)
 	{
 		self.visible = NO;
 		[self unscheduleUpdate];
+        CCLOG(@"Bullet out of bound.");
 	}
 }
 
diff --git a/cocos2d-2.x-ARC-iOS/BulletCache.m b/cocos2d-2.x-ARC-iOS/BulletCache.m
index 89a735a..6832b5a 100644
--- a/cocos2d-2.x-ARC-iOS/BulletCache.m
+++ b/cocos2d-2.x-ARC-iOS/BulletCache.m
@@ -7,8 +7,45 @@
 //
 
 #import "BulletCache.h"
-
+#import "Bullet.h"
 
 @implementation BulletCache
 
+-(id) init
+{
+    if (self = [super init])
+    {
+        // Get any bullet image from the texture atlas we're using
+        CCSpriteFrame* bulletFrame = [[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:@"bullet.png"];
+        
+        // Use the bullet's texture
+        batch = [CCSpriteBatchNode batchNodeWithTexture:bulletFrame.texture];
+        [self addChild:batch];
+        
+        // Create a number of bullets up front and re-use them
+        for (int i=0; i < 200; i++) {
+            Bullet* bullet = [Bullet bullet];
+            bullet.visible = NO;
+            [batch addChild:bullet];
+        }
+    }
+    return self;
+}
+
+-(void) shootBulletFrom:(CGPoint)startPosition velocity:(CGPoint)velocity frameName:(NSString *)frameName
+{
+    CCArray* bullets = batch.children;
+    CCNode* node = [bullets objectAtIndex:nextInactiveBullet];
+    NSAssert([node isKindOfClass:[Bullet class]], @"not a Bullet!");
+    
+    Bullet* bullet = (Bullet*) node;
+    [bullet shootBulletFromShip:startPosition velocity:velocity frameName:frameName];
+    
+    nextInactiveBullet++;
+    if (nextInactiveBullet > bullets.count)
+    {
+        nextInactiveBullet = 0;
+    }
+}
+
 @end
diff --git a/cocos2d-2.x-ARC-iOS/GameLayer.h b/cocos2d-2.x-ARC-iOS/GameLayer.h
index b9b23b7..f0c1904 100755
--- a/cocos2d-2.x-ARC-iOS/GameLayer.h
+++ b/cocos2d-2.x-ARC-iOS/GameLayer.h
@@ -17,6 +17,7 @@
 #import "cocos2d.h"
 
 @class Ship;
+@class BulletCache;
 
 typedef enum
 {
@@ -29,7 +30,6 @@ typedef enum
 {
 	GameSceneNodeTagBullet = 1,
     GameSceneNodeTagBulletCache,
-	GameSceneNodeTagBulletSpriteBatch,
     GameSceneNodeTagShip,
 	
 } GameSceneNodeTags;
@@ -39,9 +39,11 @@ typedef enum
     NSUInteger nextInactiveBullet;
 }
 
+@property (readonly) Ship* defaultShip;
+@property (readonly) BulletCache* bulletCache;
+@property (readonly) CGRect screenRect;
+
 +(id) scene;
 +(GameLayer*) sharedGameLayer;
--(CCSpriteBatchNode*) bulletSpriteBatch;
--(void) shootBulletFromShip:(Ship*)ship;
 -(Ship*) defaultShip;
 @end
diff --git a/cocos2d-2.x-ARC-iOS/GameLayer.m b/cocos2d-2.x-ARC-iOS/GameLayer.m
index 2b6d5e7..110bb03 100755
--- a/cocos2d-2.x-ARC-iOS/GameLayer.m
+++ b/cocos2d-2.x-ARC-iOS/GameLayer.m
@@ -27,6 +27,8 @@
 @implementation GameLayer
 
 static GameLayer* sharedGameLayer;
+static CGRect screenRect;
+
 +(GameLayer*) sharedGameLayer
 {
 	NSAssert(sharedGameLayer != nil, @"GameScene instance not yet initialized!");
@@ -46,14 +48,21 @@ static GameLayer* sharedGameLayer;
 	return scene;
 }
 
+-(CGRect) screenRect
+{
+    if (CGRectIsEmpty(screenRect))
+    {
+        CGSize screenSize = [CCDirector sharedDirector].winSize;
+        screenRect = CGRectMake(0, 0, screenSize.width, screenSize.height);
+    }
+    return screenRect;
+}
+
 -(id) init
 {
 	if ((self = [super init]))
 	{
 		sharedGameLayer = self;
-		
-        // if the background shines through we want to be able to see it!
-        glClearColor(1, 1, 1, 1);
         
 		// Load all of the game's artwork up front.
 		CCSpriteFrameCache* frameCache = [CCSpriteFrameCache sharedSpriteFrameCache];
@@ -81,18 +90,6 @@ static GameLayer* sharedGameLayer;
 	sharedGameLayer = nil;
 }
 
--(void) countBullets:(ccTime)delta
-{
-	CCLOG(@"Number of active Bullets: %i", self.bulletSpriteBatch.children.count);
-}
-
--(CCSpriteBatchNode*) bulletSpriteBatch
-{
-	CCNode* node = [self getChildByTag:GameSceneNodeTagBulletSpriteBatch];
-	NSAssert([node isKindOfClass:[CCSpriteBatchNode class]], @"not a CCSpriteBatchNode");
-	return (CCSpriteBatchNode*)node;
-}
-
 -(BulletCache*) bulletCache
 {
     CCNode* node = [self getChildByTag:GameSceneNodeTagBulletCache];
@@ -100,22 +97,6 @@ static GameLayer* sharedGameLayer;
     return (BulletCache*) node;
 }
 
--(void) shootBulletFromShip:(Ship*)ship
-{
-	CCArray* bullets = [self.bulletSpriteBatch children];
-	
-	CCNode* node = [bullets objectAtIndex:nextInactiveBullet];
-	NSAssert([node isKindOfClass:[Bullet class]], @"not a bullet!");
-	
-	Bullet* bullet = (Bullet*)node;
-	[bullet shootBulletFromShip:ship];
-	
-	nextInactiveBullet++;
-	if (nextInactiveBullet >= bullets.count)
-	{
-		nextInactiveBullet = 0;
-	}
-}
 
 - (Ship*) defaultShip
 {
diff --git a/cocos2d-2.x-ARC-iOS/InputLayer.m b/cocos2d-2.x-ARC-iOS/InputLayer.m
index 8ddf62b..2b9dde9 100644
--- a/cocos2d-2.x-ARC-iOS/InputLayer.m
+++ b/cocos2d-2.x-ARC-iOS/InputLayer.m
@@ -7,6 +7,7 @@
 //
 
 #import "InputLayer.h"
+#import "BulletCache.h"
 
 
 @implementation InputLayer
@@ -70,12 +71,18 @@
     totalTime += delta;
     
     GameLayer *game = [GameLayer sharedGameLayer];
-    Ship *ship = [game defaultShip];
+    Ship* ship = game.defaultShip;
+    BulletCache* bulletCache = game.bulletCache;
     
-    if (fireButton.active &&  totalTime > nextShotTime)
+    if (fireButton.active && totalTime > nextShotTime)
     {
-        nextShotTime = totalTime + 0.5f;
-        [game shootBulletFromShip:ship];
+        nextShotTime = totalTime + 0.4f;
+        
+        // Set the position, velocity and spriteFrame before shooting
+        CGPoint shotPos = CGPointMake(ship.position.x + 45, ship.position.y - 19);
+        float spread = (CCRANDOM_0_1() - 0.5f)* 0.5f;
+        CGPoint velocity = CGPointMake(200, spread * 50);
+        [bulletCache shootBulletFrom:shotPos velocity:velocity frameName:@"bullet.png"];
     }
     
     // Allow faster shooting by quickly tapping the fire button
